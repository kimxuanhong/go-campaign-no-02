// Code generated by MockGen. DO NOT EDIT.
// Source: data_source.go

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataSource is a mock of DataSource interface.
type MockDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockDataSourceMockRecorder
}

// MockDataSourceMockRecorder is the mock recorder for MockDataSource.
type MockDataSourceMockRecorder struct {
	mock *MockDataSource
}

// NewMockDataSource creates a new mock instance.
func NewMockDataSource(ctrl *gomock.Controller) *MockDataSource {
	mock := &MockDataSource{ctrl: ctrl}
	mock.recorder = &MockDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataSource) EXPECT() *MockDataSourceMockRecorder {
	return m.recorder
}

// CloseRows mocks base method.
func (m *MockDataSource) CloseRows(rows *sql.Rows) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseRows", rows)
}

// CloseRows indicates an expected call of CloseRows.
func (mr *MockDataSourceMockRecorder) CloseRows(rows interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseRows", reflect.TypeOf((*MockDataSource)(nil).CloseRows), rows)
}

// CloseStmt mocks base method.
func (m *MockDataSource) CloseStmt(stmt *sql.Stmt) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseStmt", stmt)
}

// CloseStmt indicates an expected call of CloseStmt.
func (mr *MockDataSourceMockRecorder) CloseStmt(stmt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseStmt", reflect.TypeOf((*MockDataSource)(nil).CloseStmt), stmt)
}

// GetConn mocks base method.
func (m *MockDataSource) GetConn() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetConn indicates an expected call of GetConn.
func (mr *MockDataSourceMockRecorder) GetConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockDataSource)(nil).GetConn))
}

// init mocks base method.
func (m *MockDataSource) init() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "init")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// init indicates an expected call of init.
func (mr *MockDataSourceMockRecorder) init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "init", reflect.TypeOf((*MockDataSource)(nil).init))
}
