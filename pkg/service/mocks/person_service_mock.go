// Code generated by MockGen. DO NOT EDIT.
// Source: person_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/kimxuanhong/go-campaign-no-02/pkg/dto"
	models "github.com/kimxuanhong/go-campaign-no-02/pkg/models"
)

// MockPersonService is a mock of PersonService interface.
type MockPersonService struct {
	ctrl     *gomock.Controller
	recorder *MockPersonServiceMockRecorder
}

// MockPersonServiceMockRecorder is the mock recorder for MockPersonService.
type MockPersonServiceMockRecorder struct {
	mock *MockPersonService
}

// NewMockPersonService creates a new mock instance.
func NewMockPersonService(ctrl *gomock.Controller) *MockPersonService {
	mock := &MockPersonService{ctrl: ctrl}
	mock.recorder = &MockPersonServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonService) EXPECT() *MockPersonServiceMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockPersonService) CreatePerson(personReq dto.PersonRequest) models.PersonImpl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", personReq)
	ret0, _ := ret[0].(models.PersonImpl)
	return ret0
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockPersonServiceMockRecorder) CreatePerson(personReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockPersonService)(nil).CreatePerson), personReq)
}

// DeletePerson mocks base method.
func (m *MockPersonService) DeletePerson(id int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeletePerson", id)
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockPersonServiceMockRecorder) DeletePerson(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockPersonService)(nil).DeletePerson), id)
}

// GenPerson mocks base method.
func (m *MockPersonService) GenPerson(age int) models.PersonImpl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenPerson", age)
	ret0, _ := ret[0].(models.PersonImpl)
	return ret0
}

// GenPerson indicates an expected call of GenPerson.
func (mr *MockPersonServiceMockRecorder) GenPerson(age interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenPerson", reflect.TypeOf((*MockPersonService)(nil).GenPerson), age)
}

// GetPerson mocks base method.
func (m *MockPersonService) GetPerson(id int) models.PersonImpl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerson", id)
	ret0, _ := ret[0].(models.PersonImpl)
	return ret0
}

// GetPerson indicates an expected call of GetPerson.
func (mr *MockPersonServiceMockRecorder) GetPerson(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerson", reflect.TypeOf((*MockPersonService)(nil).GetPerson), id)
}

// GetPersons mocks base method.
func (m *MockPersonService) GetPersons() []models.PersonImpl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersons")
	ret0, _ := ret[0].([]models.PersonImpl)
	return ret0
}

// GetPersons indicates an expected call of GetPersons.
func (mr *MockPersonServiceMockRecorder) GetPersons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersons", reflect.TypeOf((*MockPersonService)(nil).GetPersons))
}
